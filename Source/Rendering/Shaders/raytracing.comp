// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org)

#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

#define EPSILON 0.0001
#define MAXLEN 1000.0
#define SHADOW 0.2
#define RAYBOUNCES 4
#define REFLECTIONS true 
#define REFLECTIONSTRENGTH 0.4
#define REFLECTIONFALLOFF 0.5
#define FLT_MAX 3.402823466e+38
#define FLT_MIN 1.175494351e-38

const uint TYPE_SPHERE = 0x00000001u;
const uint TYPE_BOX = 0x00000002u;
const uint TYPE_PLANE = 0x00000004u;
const uint TYPE_MESH = 0x00000008u;
const uint TYPE_CYLINDER = 0x00000010u;
const uint TYPE_DISK = 0x00000020u;


layout (binding = 1) uniform UBO 
{
	vec3 pos;
	float aspectRatio;
	vec3 lookat;
	float fov;
} ubo;

struct Object
{
	mat4 world;
	vec3 center;
	int id;
	vec3 extents;
	int matID;
};

struct TriangleVert{
	vec3 pos;
	int _pad;
};

struct TriangleIndex{
	int v0;
	int v1;
	int v2;
	int id;
};

struct Mesh{
	int startIndex;
	int endIndex;
	int startVert;
	int endVert;
};

struct Material{
	vec3 diffuse;
	float reflective;

	float roughness;
	float transparency;
	float refractiveIndex;
	int textureID;
};

struct Light{
	vec3 pos;
	float intensity;
	vec3 color;
	int id;
};

struct flool{
	float t;
	bool b;
};

struct boxReturn{
	float t;
	vec3 tdd;
	float _pad;
	vec3 t1;
};

struct finalmaterial{
	vec3 color;
	float reflection;

	float roughness;
	float transparency;
	float refraction;
	float _pad;
};

struct sectID{
	uint type;
	int id;
	int cId;
};

layout (std140, binding = 2) buffer TriangleVerts
{
	TriangleVert verts[];
};

layout (std140, binding = 3) buffer TriangleIndices{
	TriangleIndex indices[];
};

layout (std140, binding = 4) buffer Meshs{
	Mesh meshes[];
};

layout (std140, binding = 5) buffer Objects
{
	Object objects[];
};

layout (std140, binding = 6) buffer Materials{
	Material materials[];
};

layout (std140, binding = 7) buffer Lights{
	Light lights[];
};

void reflectRay(inout vec3 rayD, in vec3 mormal)
{
	
	rayD = reflect(rayD, mormal);
	//rayD = rayD + 2.0 * -dot(mormal, rayD) * mormal;
}

void fresnel(in vec3 I, in vec3 N, in float ior, inout float kr) 
{ 
    float cosi = clamp(-1, 1, dot(I, N)); 
    float etai = 1, etat = ior; 
    if (cosi > 0) { //SWAP
		float temp = etai;
		etai = etat;
		etat = temp;
	} 
    // Compute sini using Snell's law
    float sint = etai / etat * sqrt(max(0.f, 1 - cosi * cosi)); 
    // Total internal reflection
    if (sint >= 1) { 
        kr = 1; 
    } 
    else { 
        float cost = sqrt(max(0.f, 1 - sint * sint)); 
        cosi = abs(cosi); 
        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost)); 
        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost)); 
        kr = (Rs * Rs + Rp * Rp) / 2; 
    } 
    // As a consequence of the conservation of energy, transmittance is given by:
    // kt = 1 - kr;
} 

// Lighting =========================================================

float lightDiffuse(vec3 normal, vec3 lightDir) 
{
	return clamp(dot(normal, lightDir), 0.1, 1.0);
}

float lightSpecular(vec3 normal, vec3 lightDir, float specularFactor)
{
	vec3 viewVec = normalize(ubo.pos);
	vec3 halfVec = normalize(lightDir + viewVec);
	return pow(clamp(dot(normal, halfVec), 0.0, 1.0), specularFactor);
}
// Cylinder =========================================================
// cylinder defined by extremes pa and pb, and radious ra
vec4 cylinderIntersect ( in vec3 ro, in vec3 rd, in Object cyl) // extreme a, extreme b, radius
{
	vec3 pb = cyl.center;//cyl.bottom;
	vec3 pa = cyl.center;
	pb.y += cyl.extents.y;
	pa.y -= cyl.extents.y;	
	pb = mat3(cyl.world) * pb;
	pa = mat3(cyl.world) * pa;

	float ra = cyl.extents.x;//radius;

    vec3 ca = pb-pa;

    vec3  oc = ro - pa;

    float caca = dot(ca,ca);
    float card = dot(ca,rd);
    float caoc = dot(ca,oc);
    
    float a = caca - card*card;
    float b = caca*dot( oc, rd) - caoc*card;
    float c = caca*dot( oc, oc) - caoc*caoc - ra*ra*caca;
    float h = b*b - a*c;
    if( h<0.0 ) return vec4(-1.0);
    h = sqrt(h);
    float t = (-b-h)/a;

    // body
    float y = caoc + t*card;
    if( y>0.0 && y<caca ) return vec4( t, (oc+t*rd - ca*y/caca)/ra );
    
    // caps
    t = ( ((y<0.0) ? 0.0 : caca) - caoc)/card;
    if( abs(b+a*t)<h )
    {
        return vec4( t, ca*sign(y)/caca );
    }

    return vec4(-1.0);
}

// Sphere ===========================================================

float sphereIntersect(in vec3 rayO, in vec3 rayD, in Object sphere)
{
	vec3 oc = rayO - sphere.center;
	float b = 2.0 * dot(oc, rayD);
	float c = dot(oc, oc) - sphere.extents.x*sphere.extents.x;
	float h = b*b - 4.0*c;
	if (h < 0.0) 
	{
		return -1.0;
	}
	float t = (-b - sqrt(h)) / 2.0;

	return t;
}

vec3 sphereNormal(in vec3 pos, in Object sphere)
{
	return (pos - vec4(sphere.world[3]).xyz) / sphere.extents.x;
}

// Plane ===========================================================

float planeIntersect(in vec3 rayO, in vec3 rayD, in Object plane)
{
	vec3 normal = vec3(0,1,0);
	float d = dot(rayD, normal);

	if (d > EPSILON)
		return 0.0;

	//float t = -(plane.distance + dot(rayO, normal)) / d;
	float t = dot(plane.center - rayO, normal) / d;

	if (t < 0.0)
		return 0.0;

	return t;
}

// DISK ===========================================================
float diskIntersect(in vec3 l0, in vec3 l, in Object disk) 
{ 
	float radius = disk.extents.x;
	vec3 n = vec3(0, 1, 0);
	vec3 p0 = disk.world[3].xyz;

    float t = planeIntersect(l0, l, disk);
	if (t != 0.0f) {  
        vec3 p = l0 + l * t; 
        vec3 v = p - p0; 
        float d2 = dot(v, v); 
		float r2 = radius * radius;
        //if (sqrt(d2) <= radius)
		if(d2 <= r2)
			return t;
        // or you can use the following optimisation (and precompute radius^2)
        // return d2 <= radius2; // where radius2 = radius * radius
     } 
 
     return 0.0f; 
} 

// Box =============================================================
vec4 boxIntersect( in vec3 ro, in vec3 rd, in Object box) 
{
    // convert from ray to box space
	// currently 147/148
	mat4 invWorld = inverse(box.world);
	vec3 rdd = (invWorld*vec4(rd,0.0)).xyz;
	vec3 roo = (invWorld*vec4(ro,1.0)).xyz;

	// ray-box intersection in box space
    vec3 m = 1.0/rdd;
    vec3 n = m*roo;
    vec3 k = abs(m)*box.extents;
		
    vec3 t1 = -n - k;
    vec3 t2 = -n + k;
	
	float tN = max( max( t1.x, t1.y ), t1.z );
	float tF = min( min( t2.x, t2.y ), t2.z );	
	if( tN > tF || tF < 0.0) return vec4(-1.0);

	//problem: you're calculatinog the normals before knowing if its the closest
	//should instead just send back the tn value, rdd and t1
	//current fps = 73.1ms, 13.7 fps
	//return rdd, t1, sign 3 + 3 + 
	vec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);

    // convert to ray space
	
	nor = (box.world * vec4(nor,0.0)).xyz;

	return vec4( tN, nor );
}

flool boundsIntersect(vec3 rayO, vec3 rayD, Object box){

	vec3 invDir = 1/rayD;
	vec3 invRay = invDir * rayO;
	vec3 k = abs(invDir) * box.extents;

	float tMin = FLT_MIN;
	float tMax = FLT_MAX;

	vec3 t1 = -invRay - k;
    vec3 t2 = -invRay + k;
	
	for(int i = 0; i < 3; ++i){
		tMin = max(tMin, min(t1[i], t2[i]));
		tMax = min(tMax, max(t1[i], t2[i]));
	}
	flool bob = flool(tMin, (tMax > max(tMin, 0.0)));	
	return bob;
}

// Triangle =========================================================
vec3 triNormal(in TriangleIndex tri){
	vec3 edge1 = verts[tri.v1].pos - verts[tri.v0].pos;
	vec3 edge2 = verts[tri.v2].pos - verts[tri.v0].pos;

	return normalize(cross(edge1, edge2));
}
// verts[tri.v0].pos
flool triIntersect(vec3 rayO, vec3 rayD, TriangleIndex tri){

	vec3 edge1 = verts[tri.v1].pos - verts[tri.v0].pos;
	vec3 edge2 = verts[tri.v2].pos - verts[tri.v0].pos;
	vec3 h = cross(rayD, edge2);
	float a = dot(edge1, h);
	if(a > -EPSILON && a < EPSILON)
		return flool(0, false);
	float f = 1/a;
	vec3 s = rayO - verts[tri.v0].pos;
	float u = f * dot(s, h);
	if(u < 0.f || u > 1.f)
		return flool(0, false);
	vec3 q = cross(s, edge1);
	float v = f * dot(rayD, q);
	if(v < 0.f || u + v > 1.f)
		return flool(0, false);
	
	return flool(f * dot(edge2, q), true);
}

	
sectID intersect(in vec3 rayO, in vec3 rayD, inout float resT, inout vec3 norm)
{
	sectID id = sectID(0, -1, -1);

	for(int i = 0; i < objects.length(); ++i){
		if(objects[i].id > 0){
			mat4 invWorld = inverse(objects[i].world);
			vec3 rdd = (invWorld*vec4(rayD,0.0)).xyz / objects[i].extents;
			vec3 roo = (invWorld*vec4(rayO,1.0)).xyz / objects[i].extents;

			flool tMesh = boundsIntersect(roo, rdd, objects[i]);
			if(tMesh.b && (tMesh.t > EPSILON) && (tMesh.t < resT)){
				for(int j = meshes[objects[i].id].startIndex; j < meshes[objects[i].id].endIndex; j++){
					flool tTri = triIntersect(roo, rdd, indices[j]);
					if(tTri.b){
						if((tTri.t > EPSILON) && (tTri.t < resT)){
							id = sectID(TYPE_MESH, i, j);
							resT = tTri.t;
						}
					}
				}
			}
		}//id > 0

		else if (objects[i].id == -1){ //SPHERE INTERSECT
			float tSphere = sphereIntersect(rayO, rayD, objects[i]);
			if ((tSphere > EPSILON) && (tSphere < resT))
			{
				id = sectID(TYPE_SPHERE, i, -1);
				resT = tSphere;
			}
		}
		else if (objects[i].id == -2){ //BOX INTERSECT
			vec4 tBox = boxIntersect(rayO, rayD, objects[i]);
			if(tBox.x > 0){
			if((tBox.x > EPSILON) && (tBox.x < resT)){
					id = sectID(TYPE_BOX, i, -1);
					resT = tBox.x;
					norm = tBox.yzw;
				}
			}
		}
		else if (objects[i].id == -3){ //CYLINDER INTERSECT
			vec4 tCylinder = cylinderIntersect(rayO, rayD, objects[i]);
			if((tCylinder.x > EPSILON) && (tCylinder.x < resT)){
				id = sectID(TYPE_CYLINDER, i, -1);
				resT = tCylinder.x;
				norm = tCylinder.yzw;
			}
		}
		else if (objects[i].id == -4){ //PLANE INTERSECT
			float tplane = planeIntersect(rayO, rayD, objects[i]);
			if ((tplane > EPSILON) && (tplane < resT))
			{
				id = sectID(TYPE_PLANE, i, -1);
				resT = tplane;
			}	
		}
		else if (objects[i].id == -5){ //DISK INTERSECT
			float tDisk = diskIntersect(rayO,rayD,objects[i]);
			if((tDisk > EPSILON) && (tDisk < resT)){
				id = sectID(TYPE_DISK, i,-1);
				resT = tDisk;
			}
		}
	}

	return id;
}

//rayO = pos, rayD = light, objectId = duh, t = t = length(lights[0].pos - pos);
float calcShadow(in vec3 rayO, in vec3 rayD, in sectID objectId, inout float t)
{
	for(int i = 0; i < objects.length(); ++i){ 
		if(objects[i].id > 0){/////-----MESH-----|||||
			mat4 invWorld = inverse(objects[i].world);
			vec3 rdd = (invWorld*vec4(rayD,0.0)).xyz / objects[i].extents;
			vec3 roo = (invWorld*vec4(rayO,1.0)).xyz / objects[i].extents;

			flool tMesh = boundsIntersect(roo, rdd, objects[i]);
			if(tMesh.b && (tMesh.t > EPSILON) && (tMesh.t < t)){
				for(int j = meshes[objects[i].id].startIndex; j < meshes[objects[i].id].endIndex; j++){
					flool tTri = triIntersect(roo, rdd, indices[j]);
					if(tTri.b){
						if((tTri.t > EPSILON) && (tTri.t < t)){
							t = tTri.t;
							return SHADOW;
						}
					}
				}
			}

			/*
			flool tBounds = boundsIntersect(rayO, rayD, meshes[j]);
			if(tBounds.b && ((tBounds.t > EPSILON) && (tBounds.t < t))){
				for (int i = meshes[j].startVert; i < meshes[j].endVert; ++i){
					//if(indices[i].id == objectId.cId)
					//	continue;
					flool tTri = triIntersect(rayO, rayD, indices[i]);
					if(tTri.b){
						if((tTri.t > EPSILON) && (tTri.t < t)){
							t = tTri.t;
							return SHADOW;
						}//if(tTri.t > EPSILON) && (tTri.t < t))
					}//if(tTri.b)
				}//for(int i = meshes[j].startVert; i < meshes[j].endvert; ++i)
			}//if(tBounds.b && ((tBounds.t > EPSILON) && (tBounds.t < t)))
			*/
		}
		else if(objects[i].id == -1){ /////-----SPHERE-----|||||
			float tSphere = sphereIntersect(rayO, rayD, objects[i]);
			if((tSphere > EPSILON) && (tSphere < t)){
				t = tSphere;
				return SHADOW;
			}
		}
		else if(objects[i].id == -2){ /////-----BOX-----|||||
			float tBox = boxIntersect(rayO, rayD, objects[i]).x;
			if((tBox > EPSILON) && (tBox < t))
			{
				t = tBox;
				return SHADOW;
			}
		}
		else if(objects[i].id == -3){ /////-----CYLINDER-----|||||
			float tcylinder = cylinderIntersect(rayO, rayD, objects[i]).x;
			if ((tcylinder > EPSILON) && (tcylinder < t))
			{
				t = tcylinder;
				return SHADOW;
			}
		}
		/*
		else if(objects[i].id == -4){ /////-----PLANE-----|||||
			float tPlane = planeIntersect(rayO, rayD, objects[i]);
			if((tPlane > EPSILON) && (tPlane < t)){
				t = tPlane;
				return SHADOW;
			}
		}
		else if(objects[i].id == -5){ /////-----DISK-----|||||
			float tDisk = diskIntersect(rayO,rayD, objects[i]);
			if((tDisk > EPSILON) && (tDisk < t)){
				t = tDisk;
				return SHADOW;
			}
		}*/
	}
	return 1.0;
}

finalmaterial renderScene(inout vec3 rayO, inout vec3 rayD, inout vec3 norm, in float ri)
{
	finalmaterial fMat;
	fMat.color = vec3(0.0);
	fMat.reflection = 0.0;
	fMat.refraction = 1.0;
	fMat.transparency = 0.0f;

	float t = MAXLEN;
	//vec3 norm;

	// Get intersected object ID
	sectID objectID = intersect(rayO, rayD, t, norm);
	
	if (objectID.id == -1)
	{
		return fMat;
	}
	
	vec3 pos = rayO + t * rayD;
	//vec3 lightVec = normalize(lights[0].pos - pos);				
	vec3 normal;


	// Planes
	if(objectID.type == TYPE_PLANE){
		//normal = planes[objectID.id].normal;
	}
	// DISKS
	else if(objectID.type == TYPE_DISK){
		normal = vec3(0,1,0);
	}
	// Spheres
	else if (objectID.type == TYPE_SPHERE){
		normal = sphereNormal(pos, objects[objectID.id]);	
	}
	// Cylinders
	else if (objectID.type == TYPE_CYLINDER){
		normal = norm;
	}
	//Boxes
	else if (objectID.type == TYPE_BOX){
		normal = norm;
	}
	//Meshes
	else if (objectID.type == TYPE_MESH){	
		normal = triNormal(indices[objectID.cId]);
	}

	float diffuse = 0;
	float specular = 0;
	float power = 0;
	float shadow = 0;
	for(int i = 0; i < lights.length(); ++i){
		vec3 distance = lights[i].pos - pos;
		vec3 lightVec = normalize(distance);
		float ld = length(distance);
		diffuse += lightDiffuse(normal, lightVec);
		specular += lightSpecular(normal, lightVec, 32.0f);
		power += lights[i].intensity / (ld * ld);
		if (power > 0.1)
			shadow += calcShadow(pos, lightVec, objectID, ld);
	}
	if (power > 1) power = 1;
	if (shadow > 1) shadow = 1;

	Material mat = materials[objects[objectID.id].matID];
	fMat.color = diffuse * mat.diffuse + specular;
	fMat.color *= power * shadow;
	fMat.reflection = mat.reflective;
	fMat.refraction = mat.refractiveIndex;
	fMat.transparency = mat.transparency;



	//if (id == -1)
	//	return fMat;
	//if(objectID.type != TYPE_MESH)
	//	id = objectID.id;
	//else
	//	id = objectID.cId;

	// Shadows
	//t = length(lights[1].pos - pos);
	//fMat.color *= calcShadow(pos, lightVec, objectID, t);
	/*
	float shadow;
	for(int i = 0; i < lights.length(); ++i){
		float lt = length(lights[i].pos - pos);
		vec3 lv = normalize(lights[i].pos - pos);
		shadow += calcShadow(pos, lv, objectID, lt);
	}
	if(shadow > 1)
		shadow = 1;

	fMat.color *= shadow;*/

	
	// Fog
	//fMat.color = fog(t, fMat.color);	
	
	// Reflect ray for next render pass
	//reflectRay(rayD, normal);
	if(fMat.transparency > EPSILON){
		fMat.refraction /= ri;
		fresnel(rayD, normal, fMat.refraction, fMat.reflection);
	}
	reflectRay(rayD, normal);

	rayO = pos;	
	
	return fMat;
}

void main()
{
	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;
	vec2 ps = (-1.0 + 2.0 * uv) * vec2(ubo.aspectRatio, 1.0);
	vec3 rayD = normalize(vec3(ps.x, -1.0, ps.y));
	//vec3 rayD = normalize(vec3(ps.x, ps.y, -1));
	vec3 rayO = ubo.pos;
	vec3 normal = vec3(0.f, 0.f, 0.f);

		
	// Basic color path
	float refractiveIndex = 1.0; //assuming its air
	finalmaterial finalColor = renderScene(rayO, rayD, normal, refractiveIndex);
	
	// Reflection
	if (REFLECTIONS)
	{
		float reflectionStrength = finalColor.reflection;//REFLECTIONSTRENGTH;
		float refractionStrength = 1 - reflectionStrength;
		for (float i = 0; i < RAYBOUNCES; i++)
		{
			float fallmul = (i+1) * (i+1);
			if(reflectionStrength > 0.05F){
				finalmaterial reflectionColor = renderScene(rayO, rayD, normal, finalColor.refraction);
				finalColor.color = (1.0 - reflectionStrength) * finalColor.color + reflectionStrength * mix(reflectionColor.color, finalColor.color, 1.0 - reflectionStrength);			
				reflectionStrength *= (REFLECTIONFALLOFF / fallmul);
			}
		}
	}
			
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor.color, 0.0));
}