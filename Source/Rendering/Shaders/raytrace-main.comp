// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org)

#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, rgba8) uniform writeonly image2D resultImage;

#define EPSILON 0.0001
#define MAXLEN 1000.0
#define RAYBOUNCES 4
#define REFLECTIONS true
#define REFLECTIONSTRENGTH 0.4
#define REFLECTIONFALLOFF 0.5
//#define DEBUGLINES
#define USE_EMBREE

#include "rt/structs.glsl"
#include "rt/constants.glsl"
#include "rt/ray_gen/main-rg.glsl"
#include "rt/intersect/main-intersect.glsl"
#include "rt/hit/basic-chit.glsl"

void fresnel(in vec3 I, in vec3 N, in float ior, inout float kr)
{
    float cosi = clamp(-1, 1, dot(I, N));
    float etai = 1, etat = ior;
    if (cosi > 0) { //SWAP
        float temp = etai;
        etai = etat;
        etat = temp;
    }
    // Compute sini using Snell's law
    float sint = etai / etat * sqrt(max(0.f, 1 - cosi * cosi));
    // Total internal reflection
    if (sint >= 1) {
        kr = 1;
    }
    else {
        float cost = sqrt(max(0.f, 1 - sint * sint));
        cosi = abs(cosi);
        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost));
        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost));
        kr = (Rs * Rs + Rp * Rp) / 2;
    }
    // As a consequence of the conservation of energy, transmittance is given by:
    // kt = 1 - kr;
}

// Lighting =========================================================

float lightDiffuse(vec3 normal, vec3 lightDir)
{
    return clamp(dot(normal, lightDir), 0.1, 1.0);
}

float lightSpecular(vec3 normal, vec3 lightDir, float specularFactor)
{
    vec3 viewVec = normalize(ubo.rotM[3].xyz);
    vec3 halfVec = normalize(lightDir + viewVec);
    return pow(clamp(dot(normal, halfVec), 0.0, 1.0), specularFactor);
}

finalmaterial render_scene(inout Ray ray)
{
    finalmaterial fMat;
    fMat.color = vec3(0.0);
    fMat.reflection = 0.0;
    fMat.refraction = 1.0;
    fMat.transparency = 0.0f;

    ray.t = MAXLEN;
    ray.t2 = MAXLEN;
    vec2 uv = vec2(0.0);
    // Get intersected primitive ID
    //
    HitInfo info = intersect_closest(ray);

    //if (info.t != ray.t) return fMat;

    #ifdef DEBUGLINES
    //do an intersection test with the bvh node
    if (bvhBoundsIntersect(ray, 1 / ray.d, bvhNodes[info.node_id])) {
        fMat.color = vec3(0, 1, 0);
        //imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(fMat.color, 1.0));
        return fMat;
    }
    #endif

    if (info.face_id == -1) {
        fMat.color = vec3(0);
        return fMat;
    } //MISS SHADER

    vec3 ray_pos = closest_hit_basic(info, ray, fMat);

    ray.d = reflect(ray.d, info.normal);
    ray.o = ray_pos;
    return fMat;
}

// Casts ray into scene
HitInfo[MAX_INTERSECTIONS] trace_ray_any(Ray ray)
{
    ray.t = MAXLEN;
    ray.t2 = MAXLEN;
    vec2 uv = vec2(0.0);
    vec3 norm = vec3(0.0);

    //iSectID intersectID[2] = intersectEmbreeBvh(ray, norm, uv);

    HitInfo[MAX_INTERSECTIONS] id;
    return id;
}

HitInfo trace_ray_closest(inout Ray ray)
{
    return intersect_closest(ray);
}

void main()
{
    vec3 combinedColor = vec3(0);
    vec4 txt = vec4(0);
    bool gui_hit = false;
    Ray[SAMPLES] rays = main_rg(txt, gui_hit);
    if (gui_hit) return;

    for (int samp = 0; samp < SAMPLES; samp++)
    {
        vec3 normal = vec3(0.f, 0.f, 0.f);
        // Basic color path
        float refractiveIndex = 1.0; //assuming its air
        finalmaterial finalColor = render_scene(rays[samp]);
        // Reflection
        if (REFLECTIONS)
        {
            float reflectionStrength = finalColor.reflection; //REFLECTIONSTRENGTH;
            float refractionStrength = 1 - reflectionStrength;
            for (float i = 0; i < RAYBOUNCES; i++)
            {
                float fallmul = (i + 1) * (i + 1);
                if (reflectionStrength > 0.05F) {
                    finalmaterial reflectionColor = render_scene(rays[samp]);
                    finalColor.color = (1.0 - reflectionStrength) * finalColor.color + reflectionStrength * mix(reflectionColor.color, finalColor.color, 1.0 - reflectionStrength);
                    reflectionStrength *= (REFLECTIONFALLOFF / fallmul) * reflectionColor.reflection;
                }
            }
        }
        //debug
        //debug
        combinedColor += finalColor.color / SAMPLES;
        //imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(combinedColor * (1 - txt.a), 0.0));

        imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor.color, 1.0));
    }
    //imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), texture(bindless_textures[nonuniformEXT(1)], uv));
}
